module sccb_master(
    input wire clk,       // Main system clock
    input wire reset,     // System reset
    input wire start,     // Start signal for transmission
    input wire [15:0] data_in, // 16-bit data input: [15:8] address, [7:0] data
    output reg scl,       // SCCB clock
    inout wire sda        // SCCB data
);


localparam IDLE         = 3'b000;
localparam START        = 3'b001;
localparam SEND_BYTE    = 3'b010;
localparam STOP         = 3'b011;
localparam WAIT         = 3'b100;

integer i = 0;               // Bit counter
reg [2:0] state = IDLE;      // Current state
reg [2:0] next_state;        // Next state
reg [7:0] current_byte;      // Current byte being sent
reg sda_dir = 1'b1;          // Direction of SDA line (1 = output, 0 = input)
reg sda_out = 1'b1;          // Output data on SDA line

assign sda = (sda_dir) ? sda_out : 1'bz;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        state <= IDLE;
        scl <= 1'b1;
        sda_out <= 1'b1;
        i <= 0;
    end else begin
        state <= next_state;
    end
end

always @(*) begin
    next_state = state;  
    case (state)
        IDLE: begin
            if (start)
                next_state = START;
        end
        START: begin
            next_state = SEND_BYTE;
            i = 15;  
        end
        SEND_BYTE: begin
            if (i < 0)
                next_state = STOP;
        end
        STOP: begin
            next_state = WAIT;
        end
        WAIT: begin
            next_state = IDLE; 
        end
        default: next_state = IDLE;
    endcase
end

// Control SCL and SDA outputs
always @(negedge clk) begin
    case (state)
        START: begin
            sda_out <= 0; 
            scl <= 1;
        end
        SEND_BYTE: begin
            sda_out <= data_in[i];  
            scl <= ~scl; 
            if (scl == 0 && i >= 0) i = i - 1;  
        end
        STOP: begin
            sda_out <= 0;
            scl <= 1;
            sda_out <= 1; 
        end
        WAIT: begin
            scl <= 1;
            sda_out <= 1; 
        end
    endcase
end

endmodule
